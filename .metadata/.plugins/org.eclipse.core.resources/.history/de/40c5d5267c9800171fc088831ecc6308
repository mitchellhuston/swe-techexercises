import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Enumeration;
import java.util.ResourceBundle;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

@WebServlet("/MyServlet")
public class MyServlet extends HttpServlet {
   private static final long serialVersionUID = 1L;
   static String             url              = "jdbc:mysql://swe-mitchellhuston.ddns.net:3306/calendar_db";
   static String             user             = "mitchellhuston-remote";
   static String             password         = "password";
   static Connection         connection       = null;

   public MyServlet() {
      super();
   }

   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      response.setContentType("text/html;charset=UTF-8");
      try {
         Class.forName("com.mysql.jdbc.Driver");
      } catch (ClassNotFoundException e) {
          response.getWriter().println("JDBC Driver not found.<br>");
         return;
      }
      connection = null;
      try {
         connection = DriverManager.getConnection(url, user, password);
      } catch (SQLException e) {
    	 response.getWriter().println("Failed to make connection.<br>");
         return;
      }
      if (connection != null) {
         
      } else {
    	 response.getWriter().println("Failed to make connection.<br>");
    	 return;
      }
      try {
         String selectSQL = "SELECT * FROM Events ORDER BY date";
         response.getWriter().println(selectSQL + "<br>");
         response.getWriter().println("------------------------------------------<br>");
         PreparedStatement selectAllEvents = connection.prepareStatement(selectSQL);
         ResultSet rs = selectAllEvents.executeQuery();
         while (rs.next()) {
            String id = rs.getString("id");
            String username = rs.getString("username");
            String eventName = rs.getString("eventName");
            String date = rs.getString("date");
            String eventLocation = rs.getString("eventLocation");
            
            response.getWriter().append("Event ID: " + id + "<br>");
            response.getWriter().append("Username: " + username + "<br>");
            response.getWriter().append("Event Name: " + eventName + "<br>");
            response.getWriter().append("Event Date: " + date + "<br>");
            response.getWriter().append("Event Location: " + eventLocation + "<br><br>");
         }
      } catch (SQLException e) {
    	 response.getWriter().println("SQL Query failed.<br>");
      }
      
      PrintWriter out = response.getWriter();
      
      // Use ResourceBundle to keep localized string in "LocalStrings_xx.properties"
      ResourceBundle rb = ResourceBundle.getBundle("mhuston-swe00",  request.getLocale());
 
      // Write the response message, in an HTML page
      try {
         out.println("<!DOCTYPE html");  // HTML 5
         out.println("<html><head>");
         out.println("<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>");
         String title = rb.getString("sessions.title");
         out.println("<head><title>" + title + "</title></head>");
         out.println("<body>");
         out.println("<h3>" + title + "</h3>");
 
         // Return the existing session if there is one. Otherwise, create a new session
         HttpSession session = request.getSession();
 
         // Display session information
         out.println(rb.getString("sessions.id") + " " + session.getId() + "<br />");
         out.println(rb.getString("sessions.created") + " ");
         out.println(new Date(session.getCreationTime()) + "<br />");
         out.println(rb.getString("sessions.lastaccessed") + " ");
         out.println(new Date(session.getLastAccessedTime()) + "<br /><br />");
 
         // Set an attribute (name-value pair) if present in the request
         String attName = request.getParameter("attribute_name");
         if (attName != null) attName = attName.trim();
         String attValue = request.getParameter("attribute_value");
         if (attValue != null) attValue = attValue.trim();
         if (attName != null && !attName.equals("")
               && attValue != null && !attValue.equals("") ) {
            // synchronized session object to prevent concurrent update
            synchronized(session) {
               session.setAttribute(attName, attValue);
            }
         }
 
         // Display the attributes (name-value pairs) stored in this session
         out.println(rb.getString("sessions.data") + "<br>");
         Enumeration names = session.getAttributeNames();
         while (names.hasMoreElements()) {
             String name = (String) names.nextElement();
             String value = session.getAttribute(name).toString();
             out.println(name + " = "
                   + value + "<br>");
         }
         out.println("<br />");
 
         // Display a form to prompt user to create session attribute
         out.println("<form method='get'>");
         out.println(rb.getString("sessions.dataname"));
         out.println("<input type='text' name='attribute_name'><br />");
         out.println(rb.getString("sessions.datavalue"));
         out.println("<input type='text' name='attribute_value'><br />");
         out.println("<input type='submit' value='SEND'>");
         out.println("</form><br />");
 
         out.print("<a href='");
         // Encode URL by including the session ID (URL-rewriting)
         out.print(response.encodeURL(request.getRequestURI() + "?attribute_name=foo&attribute_value=bar"));
         out.println("'>Encode URL with session ID (URL re-writing)</a>");
         out.println("</body></html>");
      } finally {
         out.close();  // Always close the output writer
      }
   }

   protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      doGet(request, response);
   }
}